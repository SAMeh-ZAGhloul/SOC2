name: radius
schema:
  ecs_field_names:
    - destination.address
    - destination.as.number
    - destination.as.organization.name
    - destination.geo.city_name
    - destination.geo.continent_name
    - destination.geo.country_iso_code
    - destination.geo.country_name
    - destination.geo.location
    - destination.geo.name
    - destination.geo.region_iso_code
    - destination.geo.region_name
    - destination.ip
    - destination.port
    - error.message
    - event.category
    - event.id
    - event.outcome
    - event.type
    - network.community_id
    - network.protocol
    - network.transport
    - related.ip
    - related.user
    - source.address
    - source.as.number
    - source.as.organization.name
    - source.geo.city_name
    - source.geo.continent_name
    - source.geo.country_iso_code
    - source.geo.country_name
    - source.geo.location
    - source.geo.name
    - source.geo.region_iso_code
    - source.geo.region_name
    - source.ip
    - source.port
    - user.name
  fields:
    - name: zeek
      type:
        fields:
          - name: session_id
            type: string
          - name: radius
            type:
              fields:
                - name: username
                  type: string
                - name: mac
                  type: string
                - name: framed_addr
                  type: string
                - name: remote_ip
                  type: string
                - name: connect_info
                  type: string
                - name: reply_msg
                  type: string
                - name: result
                  type: string
                - name: ttl
                  type: int
                - name: logged
                  type: boolean
              type: struct
        type: struct
transform: |
  .event.kind = "event"
  .event.category = ["network", "authentication"]
  .event.type = ["connection", "info"]

  .network.transport = "udp"
  .network.protocol = "radius"

  if .json.ts == null { 
      abort
  }

  .zeek.radius = object!(del(.json))

  .event.created = .ts

  .zeek.radius, err = set(.zeek.radius, split("id.orig_p", "."), .zeek.radius."id.orig_p")
  del(.zeek.radius."id.orig_p")

  .zeek.radius, err = set(.zeek.radius, split("id.orig_h", "."), .zeek.radius."id.orig_h")
  del(.zeek.radius."id.orig_h")

  .zeek.radius, err = set(.zeek.radius, split("id.resp_h", "."), .zeek.radius."id.resp_h")
  del(.zeek.radius."id.resp_h")

  .zeek.radius, err = set(.zeek.radius, split("id.resp_p", "."), .zeek.radius."id.resp_p")
  del(.zeek.radius."id.resp_p")

  .source.address = del(.zeek.radius.id.orig_h)

  .source.port = del(.zeek.radius.id.orig_p)

  .destination.address = del(.zeek.radius.id.resp_h)

  .destination.port = del(.zeek.radius.id.resp_p)

  .zeek.session_id = del(.zeek.radius.uid)

  .event.id = .zeek.session_id

  .source.ip = .source.address

  .destination.ip = .destination.address

  .user.name = .zeek.radius.username

  .event.outcome = .zeek.radius.result

  .ts = to_timestamp!(.zeek.radius.ts, "seconds") 

  del(.zeek.radius.ts)

  .related.ip = unique(filter(flatten([.source.ip, .destination.ip])) -> |_, v| { v != null }) 

  .source.as.number = del(.source.as.asn)

  .source.as.organization.name = del(.source.as.organization_name)

  .destination.as.number = del(.destination.as.asn)

  .destination.as.organization.name = del(.destination.as.organization_name)

  if .user.name != null { 
      .related.user = push(.related.user, .user.name) 
  }

  del(.zeek.radius.id)

meta:
  display_name: "radius.log"
  description: "RADIUS authentication attempts"
